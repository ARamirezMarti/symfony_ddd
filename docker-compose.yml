version: '3.5'

services:
  application:
    container_name: application
    build:
      context: ./docker
      args:
        UID: $U_ID
    volumes:
      - ./:/appdata/www
    ###> XDEBUG 3 ###
    # Use your client IP here
    # Linux: run "ip a | grep docker0"
    # Windows (with WSL2) and Mac: host.docker.internal
    environment:
      XDEBUG_CLIENT_HOST: 172.17.0.1
      XDEBUG_CLIENT_PORT: 9000
      PHP_IDE_CONFIG: serverName=application
    ports:
      - '1000:8000' 
    networks:
      - application-network

  db:
    image: mysql:5.7
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'db'   
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'root'      
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      - '5506:3306'
    expose:
      - '3306'
    volumes:
      - './.mysql-data/db:/var/lib/mysql'
    depends_on:
      - application
    networks:
      - application-network

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    networks:
      - application-network
    ports:
      - 8080:8080

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

networks:
  application-network:
volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
